#!/bin/bash
set -e

# fix malformed database with the source tmp/database.sqlite

# Determine the OS
OS=$(uname -s)

# Get the directory of the script
SCRIPT_DIR="$(dirname "$(realpath "$0")")"

# Current working directory from parent folder
CWD="$(dirname "$SCRIPT_DIR")"

USER="www-data"

# OS Detection
case "$OS" in
  Linux)
    echo "Running on Linux"
    ;;
  Darwin)
    echo "Running on macOS"
    ;;
  MINGW*|CYGWIN*|MSYS*)
    echo "Running on Windows"
    ;;
  *)
    echo "Unknown OS: $OS"
    ;;
esac

mkdir -p backups src dist/src

# Dump and export to backups/dump.sql
sqlite3 tmp/database.sqlite .dump > backups/dump.sql
echo "File size backups/dump.sql: $(stat --format="%s bytes" backups/dump.sql)"

# Import into databases
for TARGET in src/database.sqlite dist/src/database.sqlite; do
  [ -f "$TARGET" ] && rm -f "$TARGET"
  sqlite3 "$TARGET" < backups/dump.sql
done

# Re-import to tmp/
cp -f src/database.sqlite tmp/database.sqlite

# Remove Django and other specific tables from src/database.sqlite

# Define the SQLite database file path
DB_FILE="src/database.sqlite"

# List all tables
ALL_TABLES=$(sqlite3 "$DB_FILE" ".tables")
echo "All tables:"
echo "$ALL_TABLES"

# Filter tables by specific patterns
FILTERED_TABLES=""
for TABLE in $ALL_TABLES; do
  if [[ $TABLE == django_* || $TABLE == auth_* || $TABLE == user_* || $TABLE == users* || $TABLE == *xl* || $TABLE == *im3* || $TABLE == *axis* || $TABLE == *isimple* ]]; then
    FILTERED_TABLES+="$TABLE "
  fi
done

echo "Filtered tables:"
echo "$FILTERED_TABLES"

# Drop filtered tables
for TABLE in $FILTERED_TABLES; do
  TABLE=$(echo "$TABLE" | xargs) # Trim whitespace
  sqlite3 "$DB_FILE" "DROP TABLE IF EXISTS $TABLE;"
  echo "Dropped table: $TABLE"
done

# Re-copy on Windows in case previous import didn't persist
if [[ "$OS" == MINGW* || "$OS" == CYGWIN* || "$OS" == MSYS* ]]; then
  cp -f src/database.sqlite dist/src/database.sqlite
fi

# Truncate WAL files if present
for DB_PATH in tmp/database.sqlite src/database.sqlite; do
  if [ -f "${DB_PATH}-wal" ]; then
    echo "Checkpointing and truncating WAL file for $DB_PATH..."
    sqlite3 "$DB_PATH" "PRAGMA wal_checkpoint(TRUNCATE);"
    echo "$DB_PATH WAL file truncated."
  fi
done

# Set ownership for Linux
if [ "$OS" == "Linux" ]; then
  for DIR in bin public assets src tmp data; do
    chown -R "$USER":"$USER" "$CWD/$DIR"
  done
fi
