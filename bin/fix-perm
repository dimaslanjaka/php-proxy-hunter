#!/bin/bash

# Determine the OS
OS=$(uname -s)

# Get the directory of the script
SCRIPT_DIR="$(dirname "$(realpath "$0")")"

# Current working directory from parent folder
CWD="$(dirname "$SCRIPT_DIR")"

echo "Current directory: $CWD"

# parse and export .env file (dotenv)
if [ -f ".env" ]; then
  # Export the vars in .env into your shell:
  export $(egrep -v '^#' .env | xargs)
fi

# Set the user variable (can be overridden by an environment variable)
USER="www-data"

# Check the operating system and run the respective code
case "$OS" in
Linux)
  echo "Running on Linux"

  chown -R "$USER":"$USER" "$CWD"
  chown -R "$USER":"$USER" "$CWD/config"
  chown -R "$USER":"$USER" "$CWD/.env"

  # Directories to change permissions and ownership
  DIRS=(".cache" "bin" "public" "assets" "src" "tmp" "data" "config" "node_modules" "dist" "baileys_auth_info")

  # Change permissions and ownership for each directory
  for dir in "${DIRS[@]}"; do
    DIR_PATH="$CWD/$dir"

    # Change permissions (consider using a more restrictive mode as needed)
    chmod 755 "$DIR_PATH" || {
      echo "Failed to change permissions for $dir"
      exit 1
    }

    # Change ownership
    chown -R "$USER":"$USER" "$DIR_PATH" || {
      echo "Failed to change ownership for $dir"
      exit 1
    }
  done

  # Set permissions on files and directories
  chmod 777 "$CWD"/*.txt
  chmod 755 "$CWD"/*.html "$CWD"/*.js
  chmod 755 "$CWD"/*.css
  chmod 755 "$CWD"/js/*.js "$CWD"/userscripts/*.js
  chmod 777 "$CWD"/config
  chmod 755 "$CWD"/config/*
  chmod 777 "$CWD"/tmp "$CWD"/.cache "$CWD"/data
  chmod 644 "$CWD"/data/*.php
  chmod 644 "$CWD"/*.php
  chmod 644 "$CWD"/.env
  chmod 755 "$CWD"/*.sh
  chmod -R 755 "$CWD/.husky"

  # Create necessary directories and index.html files
  mkdir -p "$CWD/tmp/cookies"
  touch "$CWD/tmp/cookies/index.html"
  touch "$CWD/tmp/index.html"
  mkdir -p "$CWD/config"
  touch "$CWD/config/index.html"
  mkdir -p "$CWD/.cache"
  touch "$CWD/.cache/index.html"
  mkdir -p "$CWD/backups"
  chown -R "$USER":"$USER" "$CWD/backups"

  # Additional permissions for specific directories if they exist
  if [ -d "$CWD/assets/proxies" ]; then
    chmod 777 "$CWD/assets/proxies"
    chmod 755 "$CWD/assets/proxies"/*
    touch "$CWD/assets/proxies/index.html"
  fi
  if [ -d "$CWD/packages" ]; then
    chown -R "$USER":"$USER" "$CWD/packages"
    chown -R "$USER":"$USER" "$CWD/packages"/*
  fi
  if [ -d "$CWD/public" ]; then
    chown -R "$USER":"$USER" "$CWD/public"
    chown -R "$USER":"$USER" "$CWD/public"/*
  fi

  # Allow composer and indexing proxies to work
  chown -R "$USER":"$USER" "$CWD"/*.php "$CWD"/*.phar

  # Fix perm bin folder
  chown -R "$USER":"$USER" "$CWD/bin"
  chmod 755 "$CWD/bin"/*

  # Set permissions for vendor directory
  chmod 777 "$CWD/vendor"
  touch "$CWD/vendor/index.html"

  # Fix permission for whatsapp bot
  if [ ! -d "$(dirname "/var/www/html/assets/systemctl/start_whatsapp.sh")" ]; then
    echo "Error: Directory $(dirname "/var/www/html/assets/systemctl/start_whatsapp.sh") does not exist."
  else
    sudo chmod +x /var/www/html/assets/systemctl/start_whatsapp.sh
    sudo chown $USER:$USER /var/www/html/assets/systemctl/start_whatsapp.sh
    echo "Permissions and ownership updated successfully."
  fi
  for dir in "$CWD/node_modules" "$CWD/.yarn" "$CWD/tmp" "$CWD/dist" "$CWD/baileys_auth_info"; do
    if [ -d "$dir" ]; then
      sudo chown -R $USER:$USER "$dir"
    else
      echo "Directory $dir does not exist."
    fi
  done

  echo "Permission sets successful"

  # Fix ownership for various directories and file types
  chown -R "$USER":"$USER" "$CWD"/*.php "$CWD"/*.txt "$CWD"/*.json "$CWD"/*.js "$CWD"/*.html "$CWD"/src "$CWD"/data "$CWD"/tmp "$CWD"/vendor "$CWD"/assets
  chown -R "$USER":"$USER" "$CWD"/.cache "$CWD"/config "$CWD"/*.css "$CWD"/*.lock "$CWD"/js "$CWD"/.htaccess "$CWD"/.env

  echo "Ownership fixed"

  # Change ownership for specific file types
  find "$CWD" -type f \( -name "*.js" -o -name "*.php" -o -name "*.css" -o -name "*.html" -o -name "*.py" -o -name "*.sqlite" \) -exec chown "$USER":"$USER" {} + || {
    echo "Failed to change ownership for specific file types"
    exit 1
  }
  ;;
Darwin)
  echo "Running on macOS"
  ;;
MINGW* | CYGWIN* | MSYS*)
  echo "Running on Windows"
  ;;
*)
  echo "Unknown OS: $OS"
  exit 1
  ;;
esac

ls -la "$CWD"
