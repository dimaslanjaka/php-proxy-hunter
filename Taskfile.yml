---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
# install: https://taskfile.dev/installation/

version: '3'

vars:
  PYTHON:
    sh: |
      # use "/bin/py" as main python command
      {{ if eq OS "windows" }}
        echo "$(pwd)\\bin\\py.cmd"
      {{ else }}
        echo "$(pwd)/bin/py"
      {{ end }}
  RESOLVED_GITHUB_TOKEN:
    sh: |
      # resolve GITHUB_TOKEN from secrets
      if [ ! -z "$GITHUB_TOKEN" ]; then
        echo "$GITHUB_TOKEN"
      elif [ ! -z "$ACCESS_TOKEN" ]; then
        echo "$ACCESS_TOKEN"
      else
        echo ""
      fi
  PROJECT_DIR:
    sh: echo "$(pwd)"

env:
  PATH: '{{.PWD}}/bin:{{.PWD}}/node_modules/.bin:{{.PWD}}/venv/bin:{{.PWD}}/venv/Scripts:{{.PWD}}/vendor/bin:{{.PATH}}'

dotenv: ['.env', '.env.local']

tasks:
  default:
    silent: true
    cmd: task --list
  noop:
    internal: true
    silent: true
    cmd: noop() { :; }
  dump:
    desc: Dump test
    ignore_error: true
    silent: true
    cmds:
      - echo $PATH
      - echo $PWD
      - 'echo "python: {{.PYTHON}}"'
      - 'echo "github token: {{.RESOLVED_GITHUB_TOKEN}}"'

  install-python:
    desc: Install Python dependencies
    silent: true
    cmds:
      - 'echo "Installing Python packages using {{.PYTHON}}"'
      - '"{{.PYTHON}}" -m ensurepip --upgrade'
      - '"{{.PYTHON}}" -m pip install --upgrade pip'
      - '"{{.PYTHON}}" -m pip install --upgrade setuptools'
      - '"{{.PYTHON}}" -m pip install --upgrade wheel'
      - '"{{.PYTHON}}" -m pip install socks requests'
      # - '"{{.PYTHON}}" requirements_install.py --generate'
      # - '"{{.PYTHON}}" -m pip install -r requirements.txt'
      - '"{{.PYTHON}}" requirements_install.py'
      - '"{{.PYTHON}}" -m pip install -e file:packages/proxy-checker-python'
      - '"{{.PYTHON}}" -m pip install -e file:packages/proxy-hunter-python'
      - '"{{.PYTHON}}" -m pip install -e file:packages/rsa-utility'
      - '"{{.PYTHON}}" -m pip install -e file:packages/selenium-stealth'
      - '"{{.PYTHON}}" -m pip install -e file:packages/netscape-cookies'

  install-php:
    desc: Install PHP dependencies
    env:
      COMPOSER_AUTH: |
        {
          "github-oauth": {
            "github.com": "{{.RESOLVED_GITHUB_TOKEN}}"
          }
        }
    silent: true
    cmds:
      - |
        if [ -z "$RESOLVED_GITHUB_TOKEN" ]; then
          echo "RESOLVED_GITHUB_TOKEN is empty, trying to load .env..."
          if [ -f ".env" ]; then
            set -a
            . ./.env
            set +a
          fi

          # Re-check ACCESS_TOKEN or GITHUB_TOKEN after loading .env
          if [ ! -z "$GITHUB_TOKEN" ]; then
            RESOLVED_GITHUB_TOKEN="$GITHUB_TOKEN"
          elif [ ! -z "$ACCESS_TOKEN" ]; then
            RESOLVED_GITHUB_TOKEN="$ACCESS_TOKEN"
          else
            echo "Error: RESOLVED_GITHUB_TOKEN is empty. Please set GITHUB_TOKEN or ACCESS_TOKEN in .env"
            exit 1
          fi
        fi

        # Remove any trailing newlines or carriage returns and trim whitespace
        RESOLVED_GITHUB_TOKEN=$(echo "$RESOLVED_GITHUB_TOKEN" | tr -d '\r\n' | xargs)
        echo "Using RESOLVED_GITHUB_TOKEN: $RESOLVED_GITHUB_TOKEN"

        export COMPOSER_AUTH='{
          "github-oauth": {
            "github.com": "'"$RESOLVED_GITHUB_TOKEN"'"
          }
        }'

        # php bin/composer.phar config github-oauth.github.com "$RESOLVED_GITHUB_TOKEN"
        echo "Creating auth.json with resolved GitHub token..."
        cat > auth.json <<EOF
        {
          "github-oauth": {
            "github.com": "$RESOLVED_GITHUB_TOKEN"
          }
        }
        EOF
      - php bin/composer.phar install --no-progress --no-suggest --no-interaction --optimize-autoloader

  install-nodejs:
    desc: Install NodeJS dependencies
    silent: true
    cmds:
      - touch yarn.lock
      - |
        yarn install
        if [ $? -ne 0 ]; then
          cat /tmp/xfs-*/build.log
          exit 1
        fi

  build-nodejs:
    desc: Build NodeJS project
    silent: true
    cmds:
      - rollup -c rollup.project.js
      - rollup -c rollup.php.js
      - rollup -c rollup.whatsapp.js

  build:
    desc: Build all projects
    silent: true
    cmds:
      - task build-nodejs

  fix-perm:
    desc: Fix file permissions (Linux only)
    silent: true
    deps:
      - skip-lfs
    cmds:
      - |
        if [ "$(uname)" != "Linux" ]; then
          echo "This task can only run on Linux."
          exit 1
        fi

        echo "Fixing permissions in bin/..."

        # Set read/write for owner, readable for group/others
        chmod -R u+rw,go+r,go-w bin/

        # Ensure executable permission for all files (not just dirs)
        find bin/ -type f -exec chmod u+x {} \;

        # Show result
        ls -l bin/

  skip-lfs:
    desc: Skip Git LFS smudge and process filters
    silent: true
    cmds:
      - |
        git config --global filter.lfs.process "git-lfs filter-process --skip"
        git config --global filter.lfs.smudge "git-lfs smudge --skip -- %f"
