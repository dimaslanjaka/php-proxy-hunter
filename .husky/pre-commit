#!/bin/sh

# Check if repository uses Git LFS by inspecting .gitattributes or `git lfs track`
# If LFS is used, require git-lfs; otherwise only warn.
REPO_USES_LFS=0
if [ -f .gitattributes ]; then
  if grep -qE "filter=lfs|\bLFS\b" .gitattributes; then
    REPO_USES_LFS=1
  fi
fi

# Also consider `git lfs track` output (non-zero means git-lfs missing or no tracked files)
if command -v git-lfs >/dev/null 2>&1; then
  if git lfs track >/dev/null 2>&1 && [ -n "$(git lfs track)" ]; then
    REPO_USES_LFS=1
  fi
fi

if [ $REPO_USES_LFS -eq 1 ]; then
  if ! command -v git-lfs >/dev/null 2>&1; then
    echo >&2 "\nThis repository appears to use Git LFS but 'git-lfs' was not found on your PATH.\n"
    echo >&2 "Please install Git LFS: https://git-lfs.com/ or configure the repository to not use LFS.\n"
    exit 2
  fi
  # Run git LFS post-commit (optional)
  git lfs post-commit "$@"
else
  echo "Note: Git LFS not detected in use for this repository; skipping git-lfs check."
fi

# Determine the current script directory and project directory
SCRIPT_DIR=$(dirname "$(realpath "$0")")
PROJECT_DIR=$(dirname "$SCRIPT_DIR")
echo "Current script directory: $PROJECT_DIR"

# Get a list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Initialize variables
PYTHON_FILES_FOUND=0
PHP_FILES_FOUND=0

# Check for files with specific extensions
for FILE in $STAGED_FILES; do
  case "$FILE" in
    *.py)
      PYTHON_FILES_FOUND=1
      echo "Python file detected: $FILE"
      ;;
    *.php)
      PHP_FILES_FOUND=1
      echo "PHP file detected: $FILE"
      ;;
  esac
done

# Run cfh if applicable
if [ "$PYTHON_FILES_FOUND" -eq 1 ] || [ "$PHP_FILES_FOUND" -eq 1 ]; then
  HASH_SCRIPT="$PROJECT_DIR/bin/cfh"
  if [ -x "$HASH_SCRIPT" ]; then
    bash "$HASH_SCRIPT" || {
      echo "Failed to create file hashes"
      exit 1
    }
  else
    echo "cfh script not found or not executable: $HASH_SCRIPT"
    exit 1
  fi
fi

# Run php-cs-fixer if PHP files were changed
if [ "$PHP_FILES_FOUND" -eq 1 ]; then
  git status --porcelain | grep -e '^[AM].*\.php$' | cut -c 4- | while read -r line; do
    php "$PROJECT_DIR/bin/composer.phar" exec -- php-cs-fixer fix --config="$PROJECT_DIR/.php-cs-fixer.dist.php" --verbose "$line"
    git add "$line"
  done
fi

# Run lint-staged
if command -v yarn >/dev/null 2>&1; then
  if [ -f "$PROJECT_DIR/.yarnrc.yml" ]; then
    yarn dlx lint-staged || {
      echo "Lint-staged failed"
      exit 1
    }
  else
    npx lint-staged || {
      echo "Lint-staged failed"
      exit 1
    }
  fi
else
  npx lint-staged || {
    echo "Lint-staged failed"
    exit 1
  }
fi

# Optional: Auto format Python files
# python "$SCRIPT_DIR/python-autopep8.py" || {
#   echo "Autopep8 formatting failed"
#   exit 1
# }

exit 0
