#!/bin/bash

# Determine the current script directory
SCRIPT_DIR=$(dirname "$(realpath "$0")")

# Set CWD to the root directory of the Git repository
CWD=$(git rev-parse --show-toplevel)
if [ $? -ne 0 ]; then
  echo "Error: Not in a Git repository"
  exit 1
fi

# Get a list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Initialize variables
PYTHON_FILES_FOUND=0
PHP_FILES_FOUND=0

# Check for files with specific extensions
for FILE in $STAGED_FILES; do
    if echo "$FILE" | grep -q '\.py$'; then
        PYTHON_FILES_FOUND=1
        echo "Python file detected: $FILE"
    fi
    if echo "$FILE" | grep -q '\.php$'; then
        PHP_FILES_FOUND=1
        echo "PHP file detected: $FILE"
    fi
done

# Take action based on whether Python or PHP files were found
if [ $PYTHON_FILES_FOUND -eq 1 ] || [ $PHP_FILES_FOUND -eq 1 ]; then
    bash "$CWD/bin/create-file-hashes"
fi

# Fix permissions
OS=$(uname -s)
HOST=$(hostname)

if command -v nginx >/dev/null 2>&1; then
  echo "Nginx is installed"
else
  echo "Nginx is not installed"
  exit 0
fi

if echo "$OS" | grep -q -E "CYGWIN|MINGW|MSYS"; then
  echo "No need change file permissions on windows"
elif [ "$OS" = "Linux" ]; then
  # Check for WSL/WSL2
  if grep -qiE 'microsoft|wsl' /proc/version 2>/dev/null; then
    echo "Skipping permission fix on WSL/WSL2"
  elif echo "$HOST" | grep -q 'DESKTOP'; then
    echo "Skipping permission fix on host: $HOST"
  else
    # Change to the Git root directory
    cd "$CWD" || exit
    # Fix permissions
    bash "$CWD/bin/fix-perm"
  fi
else
  echo "Unsupported operating system"
  exit 1
fi

# Exit successfully if everything worked
exit 0
