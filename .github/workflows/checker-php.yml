name: Checker PHP

on:
  push:
    paths:
      - 'artisan/**/*.php'
      - 'data/**/*.php'
      - 'src/PhpProxyHunter/**/*.php'
      - '.github/workflows/checker-php.yml'
      - 'composer.json'
  schedule:
    - cron: '0 */3 * * *' # Every 3 hours
  workflow_dispatch:
    inputs:
      max:
        description: 'Maximum proxies to be checked.'
        required: true
        default: '100'
        type: string
  workflow_call:
    inputs:
      max:
        description: 'Maximum proxies to be checked.'
        required: true
        default: '100'
        type: string
    secrets:
      ACCESS_TOKEN:
        required: true

concurrency:
  group: php-proxy-checker
  cancel-in-progress: false

jobs:
  build:
    if: contains(github.repository, 'php-proxy-hunter')
    runs-on: windows-latest
    permissions: read-all
    env:
      PIP_CACHE_DIR: ${{ github.workspace }}/project/tmp/pip
      NUITKA_CACHE_DIR: ${{ github.workspace }}/project/tmp/nuitka-cache
      NODE_OPTIONS: --max_old_space_size=4096
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
      YARN_CHECKSUM_BEHAVIOR: update
    defaults:
      run:
        shell: bash

    steps:
      # Set timezone
      - uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: Asia/Jakarta

      # Checkout project and data repositories
      - uses: actions/checkout@v4
        with:
          repository: dimaslanjaka/php-proxy-hunter
          ref: master
          token: ${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          lfs: true

      - uses: actions/checkout@v4
        with:
          repository: dimaslanjaka/data
          path: public
          token: ${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          lfs: true

      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'yarn'

      - run: corepack enable

      - name: Update Submodules
        run: |
          echo "Initializing submodules..."
          git submodule update --init --recursive
          npm install -g rimraf binary-collections@https://raw.githubusercontent.com/dimaslanjaka/bin/master/releases/bin.tgz
          npx rimraf .git/modules
          npx submodule-install

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          extensions: mbstring, intl, pecl_http, curl, pdo_mysql, pdo_sqlite, dom, zip, fileinfo, json, redis
          ini-values: post_max_size=256M, max_execution_time=180
          tools: php-cs-fixer, phpunit, composer:v2
          coverage: none
        env:
          fail-fast: true

      # Cache dependencies and outputs
      - uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.cache/pip
            **/dist/**
            **/tmp/**
            src/*.sqlite*
            src/*.mmdb
            **/node_modules/**
            .yarn/caches/
            .yarn/*.gz
            ./venv/
            ${{ env.PIP_CACHE_DIR }}
            ${{ env.NUITKA_CACHE_DIR }}
            *.lock
            *.txt
            package-lock.json
            assets/proxies/
            vendor/
            ${{ env.USERPROFILE }}\AppData\Local\Nuitka\Nuitka\Cache
            $HOME/AppData/Local/Nuitka/Nuitka/Cache
            config/
            .cache/
            working.json
          key: ${{ runner.os }}-php-${{ hashFiles('.husky/hash.txt') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ hashFiles('.husky/hash.txt') }}
            ${{ runner.os }}-php-
            ${{ runner.os }}-nuitka-
            ${{ runner.os }}-python-
            ${{ runner.os }}-

      # Install required tools
      - name: Install required tools
        run: |
          npm install -g @go-task/cli
          python3 -m ensurepip --upgrade
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install requests

      # Install PHP dependencies (if cache missed)
      - name: Install PHP dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        env:
          COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}"}}'
        run: |
          php composer.phar config --global github-oauth.github.com "${{ secrets.ACCESS_TOKEN || secrets.GITHUB_TOKEN }}"
          # If vendor folder is missing or empty, remove composer.lock and re-install
          if [ ! -d vendor ] || [ -z "$(ls -A vendor 2>/dev/null)" ]; then
            rm -f composer.lock
            php composer.phar install --prefer-dist --no-progress --no-interaction --optimize-autoloader;
          elif [ ! -f composer.lock ]; then
            php composer.phar install --prefer-dist --no-progress --no-interaction --optimize-autoloader;
          fi

      # Install Python dependencies (if cache missed)
      - name: Install Python dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: task install-python

      # Install NodeJS dependencies (if cache missed)
      - name: Install NodeJS Dependencies
        shell: bash
        run: task install-nodejs

      # Initialize scripts
      - name: Initialize GitHub Actions
        env:
          GITHUB_OUTPUT: $GITHUB_OUTPUT
        run: |
          python github-actions-init.py
          php github-actions-init.php

      # Download & process data
      - name: Download required files
        run: python3 src/geoPlugin.py

      - name: Cleanup
        run: php artisan/cleaner.php

      - name: Fetch proxies
        run: php artisan/proxyFetcher.php

      - name: Index proxies
        run: php proxies-all.php

      - name: Check proxies
        run: php proxyCheckerParallel.php

      - name: Upload Proxies
        run: python3 proxyWorking.py
